// <auto-generated />
using System;
using System.Collections.Generic;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230416135922_InitialSchema")]
    partial class InitialSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Domain.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("character varying(90)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<string>("DisplayText")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("character varying(90)")
                        .HasColumnName("display_text");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("character varying(90)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("character varying(90)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("Value")
                        .IsUnique();

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "initial_create",
                            CreatedUtc = new DateTime(2023, 4, 16, 13, 59, 22, 758, DateTimeKind.Utc).AddTicks(1737),
                            DisplayText = "computer science",
                            ModifiedBy = "initial_create",
                            ModifiedUtc = new DateTime(2023, 4, 16, 13, 59, 22, 758, DateTimeKind.Utc).AddTicks(1738),
                            Value = "computer_science"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "initial_create",
                            CreatedUtc = new DateTime(2023, 4, 16, 13, 59, 22, 758, DateTimeKind.Utc).AddTicks(1741),
                            DisplayText = "backend",
                            ModifiedBy = "initial_create",
                            ModifiedUtc = new DateTime(2023, 4, 16, 13, 59, 22, 758, DateTimeKind.Utc).AddTicks(1742),
                            Value = "backend"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "initial_create",
                            CreatedUtc = new DateTime(2023, 4, 16, 13, 59, 22, 758, DateTimeKind.Utc).AddTicks(1742),
                            DisplayText = "frontend",
                            ModifiedBy = "initial_create",
                            ModifiedUtc = new DateTime(2023, 4, 16, 13, 59, 22, 758, DateTimeKind.Utc).AddTicks(1743),
                            Value = "frontend"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "initial_create",
                            CreatedUtc = new DateTime(2023, 4, 16, 13, 59, 22, 758, DateTimeKind.Utc).AddTicks(1743),
                            DisplayText = "databases",
                            ModifiedBy = "initial_create",
                            ModifiedUtc = new DateTime(2023, 4, 16, 13, 59, 22, 758, DateTimeKind.Utc).AddTicks(1744),
                            Value = "databases"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "initial_create",
                            CreatedUtc = new DateTime(2023, 4, 16, 13, 59, 22, 758, DateTimeKind.Utc).AddTicks(1744),
                            DisplayText = "object-oriented",
                            ModifiedBy = "initial_create",
                            ModifiedUtc = new DateTime(2023, 4, 16, 13, 59, 22, 758, DateTimeKind.Utc).AddTicks(1745),
                            Value = "object_oriented"
                        });
                });

            modelBuilder.Entity("Core.Domain.Models.Difficulty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("character varying(90)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<string>("DisplayText")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("character varying(90)")
                        .HasColumnName("display_text");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("character varying(90)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc");

                    b.HasKey("Id");

                    b.HasIndex("DisplayText")
                        .IsUnique();

                    b.ToTable("difficulties", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "initial_create",
                            CreatedUtc = new DateTime(2023, 4, 16, 13, 59, 22, 758, DateTimeKind.Utc).AddTicks(2300),
                            DisplayText = "easy",
                            ModifiedBy = "initial_create",
                            ModifiedUtc = new DateTime(2023, 4, 16, 13, 59, 22, 758, DateTimeKind.Utc).AddTicks(2301)
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "initial_create",
                            CreatedUtc = new DateTime(2023, 4, 16, 13, 59, 22, 758, DateTimeKind.Utc).AddTicks(2303),
                            DisplayText = "medium",
                            ModifiedBy = "initial_create",
                            ModifiedUtc = new DateTime(2023, 4, 16, 13, 59, 22, 758, DateTimeKind.Utc).AddTicks(2303)
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "initial_create",
                            CreatedUtc = new DateTime(2023, 4, 16, 13, 59, 22, 758, DateTimeKind.Utc).AddTicks(2304),
                            DisplayText = "hard",
                            ModifiedBy = "initial_create",
                            ModifiedUtc = new DateTime(2023, 4, 16, 13, 59, 22, 758, DateTimeKind.Utc).AddTicks(2304)
                        });
                });

            modelBuilder.Entity("Core.Domain.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<List<string>>("AnswerOptions")
                        .IsRequired()
                        .HasColumnType("character varying[]")
                        .HasColumnName("answer_options");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("character varying(90)")
                        .HasColumnName("correct_answer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("character varying(90)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<int>("DifficultyId")
                        .HasColumnType("integer")
                        .HasColumnName("difficulty_id");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("character varying(90)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("question_text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("QuestionText")
                        .IsUnique();

                    b.ToTable("questions", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("character varying(90)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_utc");

                    b.Property<string>("DisplayText")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("character varying(90)")
                        .HasColumnName("display_text");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("character varying(90)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("character varying(90)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Entities.QuestionTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer")
                        .HasColumnName("question_id");

                    b.Property<int>("TagId")
                        .HasColumnType("integer")
                        .HasColumnName("tag_id");

                    b.HasKey("Id")
                        .HasAnnotation("ColumnName", "id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TagId");

                    b.ToTable("question_tags", (string)null);
                });

            modelBuilder.Entity("Core.Domain.Models.Question", b =>
                {
                    b.HasOne("Core.Domain.Models.Category", "Category")
                        .WithMany("Questions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Models.Difficulty", "Difficulty")
                        .WithMany("Questions")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Difficulty");
                });

            modelBuilder.Entity("Infrastructure.Entities.QuestionTag", b =>
                {
                    b.HasOne("Core.Domain.Models.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domain.Models.Category", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Core.Domain.Models.Difficulty", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
